# Copyright 2020 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |
      Deployment template for the Platform Serices
      project registry.
    iconClass: icon-node
  name: platform-services-registry
objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: platsrv-registry
      name: ${API_NAME}
    spec:
      path: ""
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${API_NAME}
        weight: 100
  # - apiVersion: v1
  #   kind: PersistentVolumeClaim
  #   metadata:
  #     labels:
  #       app: platsrv-registry
  #     name: ${POSTGRES_VOLUME_NAME}
  #   spec:
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: ${POSTGRES_VOLUME_CAPACITY}
  #     storageClassName: netapp-file-standard
  # - apiVersion: v1
  #   kind: Service
  #   metadata:
  #     labels:
  #       app: platsrv-registry
  #     name: ${POSTGRES_DEPLOYMENT_NAME}
  #   spec:
  #     selector:
  #       deploymentconfig: ${POSTGRES_DEPLOYMENT_NAME}
  #     ports:
  #       - name: 5432-tcp
  #         port: 5432
  #         protocol: TCP
  #         targetPort: 5432
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: platsrv-registry
      name: ${API_NAME}
    spec:
      selector:
        deploymentconfig: ${API_NAME}
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
  # - apiVersion: v1
  #   kind: DeploymentConfig
  #   metadata:
  #     labels:
  #       app: platsrv-registry
  #     name: ${POSTGRES_DEPLOYMENT_NAME}
  #   spec:
  #     replicas: 1
  #     selector:
  #       deploymentconfig: ${POSTGRES_DEPLOYMENT_NAME}
  #     strategy:
  #       type: Rolling
  #     template:
  #       metadata:
  #         labels:
  #           app: platsrv-registry
  #           role: db
  #           deploymentconfig: ${POSTGRES_DEPLOYMENT_NAME}
  #         name: ${POSTGRES_DEPLOYMENT_NAME}
  #       spec:
  #         containers:
  #         - env:
  #           - name: POSTGRESQL_USER
  #             valueFrom:
  #               secretKeyRef:
  #                 key: user
  #                 name: ${POSTGRESQL_SECRET_NAME}
  #           - name: POSTGRESQL_PASSWORD
  #             valueFrom:
  #               secretKeyRef:
  #                 key: password
  #                 name: ${POSTGRESQL_SECRET_NAME}
  #           - name: POSTGRESQL_DATABASE
  #             value: ${POSTGRESQL_DATABASE}
  #           image: registry.redhat.io/rhscl/postgresql-12-rhel7:latest
  #           livenessProbe:
  #             initialDelaySeconds: 60
  #             tcpSocket:
  #               port: 5432
  #             timeoutSeconds: 1
  #           name: ${POSTGRES_DEPLOYMENT_NAME}
  #           ports:
  #           - containerPort: 5432
  #             protocol: TCP
  #           readinessProbe:
  #             exec:
  #               command:
  #               - /bin/sh
  #               - -i
  #               - -c
  #               - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
  #                 'SELECT 1'
  #             initialDelaySeconds: 5
  #             timeoutSeconds: 1
  #           resources:
  #             limits:
  #               memory: ${POSTGRESQL_MEMORY_LIMIT}
  #           volumeMounts:
  #           - mountPath: /var/lib/pgsql/data
  #             name: ${POSTGRES_VOLUME_NAME}
  #         volumes:
  #         - name: ${POSTGRES_VOLUME_NAME}
  #           persistentVolumeClaim:
  #             claimName: ${POSTGRES_VOLUME_NAME}
  #     triggers:
  #       - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: platsrv-registry
      name: ${API_NAME}
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${API_NAME}
            from:
              kind: ImageStreamTag
              name: ${SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_TAG}
              namespace: ${SOURCE_IMAGE_NAMESPACE}
      replicas: 1
      selector:
        deploymentconfig: ${API_NAME}
      template:
        metadata:
          labels:
            app: platsrv-registry
            role: api
            deploymentconfig: ${API_NAME}
          name: ${API_NAME}
        spec:
          containers:
            - name: ${API_NAME}
              image: " "
              readinessProbe:
                httpGet:
                  path: /api/v1/ehlo
                  port: 8080
                initialDelaySeconds: 10
                timeoutSeconds: 3
              ports:
                - containerPort: 8080
              env:
                - name: LOG_LEVEL
                  value: debug
                - name: PORT
                  value: "8080"
                - name: NODE_ENV
                  value: production
                - name: APP_DB_USER
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: ${POSTGRESQL_SECRET_NAME}
                - name: APP_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: ${POSTGRESQL_SECRET_NAME}
                - name: POSTGRESQL_HOST
                  value: ${POSTGRESQL_DATABASE}
                - name: CHES_BASEURL
                  value: ${CHES_BASEURL}
                - name: CHES_SSO_TOKEN_URL
                  value: ${CHES_SSO_TOKEN_URL}
                - name: CHES_SSO_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: clientId
                      name: ${CHES_SECRET_NAME}
                - name: CHES_SSO_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: secret
                      name: ${CHES_SECRET_NAME}
                - name: NATS_HOST
                  value: ${NATS_HOST_URL}
                - name: SSO_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: secret
                      name: ${SSO_SECRET_NAME}
              resources:
                limits:
                  cpu: 300m
                  memory: 128Mi
                requests:
                  cpu: 200m
                  memory: 92Mi
              volumeMounts:
                - name: config-vol
                  mountPath: /opt/app-root/src/build/config/config.json
                  subPath: config.json
          volumes:
            - name: config-vol
              configMap:
                name: registry-api-config
parameters:
  - description:
      The name assigned to all of the objects defined in this template.  You
      should keep this as default unless your know what your doing.
    displayName: Name
    name: API_NAME
    required: true
    value: registry-api
  - description:
      The namespace of the OpenShift project containing the imagestream for
      the application.
    displayName: Environment namespace
    name: NAMESPACE
    required: true
  - description: The secret name for the database.
    displayName: PostgreSQL secret name
    name: POSTGRESQL_SECRET_NAME
    value: registry-patroni
  - displayName: The PostgreSQL database service name
    name: POSTGRESQL_DATABASE
    required: true
    value: registry-patroni-master
  - description: The openshift project where builds and target images are stored.
    displayName: Build Project
    name: SOURCE_IMAGE_NAMESPACE
    required: true
  - description: The name of the source image.
    displayName: Source Image Name
    name: SOURCE_IMAGE_NAME
    value: platsrv-registry-api
    required: true
  - description: The tag of the source image.
    displayName: Source Image Tag
    name: SOURCE_IMAGE_TAG
    required: true
  - description: The Common Hosted Email Service secret name
    displayName: Email Service Secret Name
    name: CHES_SECRET_NAME
    value: registry-ches-creds
  - description: The base URL for the Common Hosted Email Service API
    displayName: Email Service API URL
    name: CHES_BASEURL
    required: true
  - description: The Common Hosted Email Service SSO URL
    displayName: Email Service SSO URL
    name: CHES_SSO_TOKEN_URL
    required: true
  - description: |
      The NATS host URI
    displayName: NATS Host URI
    name: NATS_HOST_URL
    required: true
  - description: |
      The name of the SSO client shared secret.
    displayName: SSO Shared Secret Name
    name: SSO_SECRET_NAME
    value: registry-sso-creds
